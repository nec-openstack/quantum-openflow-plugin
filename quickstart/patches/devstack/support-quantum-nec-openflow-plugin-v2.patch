diff --git a/stack.sh b/stack.sh
index 3827d77..d9e77e7 100755
--- a/stack.sh
+++ b/stack.sh
@@ -683,7 +683,7 @@ if is_service_enabled horizon; then
 fi
 
 if is_service_enabled q-agt; then
-    if [[ "$Q_PLUGIN" = "openvswitch" ]]; then
+    if [[ "$Q_PLUGIN" = "openvswitch" || "$Q_PLUGIN" = "nec" ]]; then
         # Install deps
         # FIXME add to files/apts/quantum, but don't install if not needed!
         if [[ "$os_PACKAGE" = "deb" ]]; then
@@ -1132,6 +1132,16 @@ if is_service_enabled quantum; then
         elif [[ "$NOVA_USE_QUANTUM_API" = "v2" ]]; then
             Q_PLUGIN_CLASS="quantum.plugins.linuxbridge.lb_quantum_plugin.LinuxBridgePluginV2"
         fi
+    elif [[ "$Q_PLUGIN" = "nec" ]]; then
+        Q_PLUGIN_CONF_PATH=etc/quantum/plugins/nec
+        Q_PLUGIN_CONF_FILENAME=nec.ini
+        Q_DB_NAME="quantum_nec"
+        if [[ "$NOVA_USE_QUANTUM_API" = "v1" ]]; then
+            echo "NEC Plugin does not support v1 .. exiting"
+            exit 1
+        elif [[ "$NOVA_USE_QUANTUM_API" = "v2" ]]; then
+            Q_PLUGIN_CLASS="quantum.plugins.nec.nec_plugin.NECPluginV2"
+        fi
     else
         echo "Unknown Quantum plugin '$Q_PLUGIN'.. exiting"
         exit 1
@@ -1153,6 +1163,11 @@ if is_service_enabled quantum; then
             exit 1
         fi
         sudo sed -i -e "s/.*enable_tunneling = .*$/enable_tunneling = $OVS_ENABLE_TUNNELING/g" /$Q_PLUGIN_CONF_FILE
+    elif [[ "$Q_PLUGIN" = "nec" ]]; then
+        iniset /$Q_PLUGIN_CONF_FILE DEFAULT rabbit_host $RABBIT_HOST
+        iniset /$Q_PLUGIN_CONF_FILE DEFAULT rabbit_password $RABBIT_PASSWORD
+        iniset /$Q_PLUGIN_CONF_FILE OFC host ${OFC_HOST:-127.0.0.1}
+        iniset /$Q_PLUGIN_CONF_FILE OFC port ${OFC_PORT:-8888}
     fi
 
     if [[ "$NOVA_USE_QUANTUM_API" = "v1" ]]; then
@@ -1214,6 +1229,30 @@ if is_service_enabled q-agt; then
        QUANTUM_LB_PRIVATE_INTERFACE=${QUANTUM_LB_PRIVATE_INTERFACE:-$GUEST_INTERFACE_DEFAULT}
        sudo sed -i -e "s/^physical_interface = .*$/physical_interface = $QUANTUM_LB_PRIVATE_INTERFACE/g" /$Q_PLUGIN_CONF_FILE
        AGENT_BINARY="$QUANTUM_DIR/quantum/plugins/linuxbridge/agent/linuxbridge_quantum_agent.py"
+    elif [[ "$Q_PLUGIN" = "nec" ]]; then
+        # Set up integration bridge
+        OVS_BRIDGE=${OVS_BRIDGE:-br-int}
+        for PORT in `sudo ovs-vsctl --no-wait list-ports $OVS_BRIDGE`; do
+            if [[ "$PORT" =~ tap* ]]; then echo `sudo ip link delete $PORT` > /dev/null; fi
+            sudo ovs-vsctl --no-wait del-port $OVS_BRIDGE $PORT
+        done
+        sudo ovs-vsctl --no-wait -- --if-exists del-br $OVS_BRIDGE
+        sudo ovs-vsctl --no-wait add-br $OVS_BRIDGE
+        sudo ovs-vsctl --no-wait br-set-external-id $OVS_BRIDGE bridge-id br-int
+        sudo ovs-vsctl --no-wait set-controller $OVS_BRIDGE tcp:${OFC_HOST:-127.0.0.1}
+        if [ -n "$OVS_INTERFACE" ]; then
+            sudo ovs-vsctl --no-wait add-port $OVS_BRIDGE $OVS_INTERFACE
+        fi
+        if [ -n "$GRE_REMOTE_IPS" ]; then
+            id=0
+            for ip in ${GRE_REMOTE_IPS//:/ }
+            do
+                sudo ovs-vsctl --no-wait add-port $OVS_BRIDGE gre$id -- \
+                    set Interface gre$id type=gre options:remote_ip=$ip
+                id=`expr $id + 1`
+            done
+        fi
+        AGENT_BINARY="$QUANTUM_DIR/quantum/plugins/nec/agent/nec_quantum_agent.py"
     fi
     # Start up the quantum agent
     screen_it q-agt "sudo python $AGENT_BINARY --config-file $Q_CONF_FILE --config-file /$Q_PLUGIN_CONF_FILE"
@@ -1241,7 +1280,7 @@ if is_service_enabled q-dhcp; then
     iniset $Q_DHCP_CONF_FILE DEFAULT admin_user $Q_ADMIN_USERNAME
     iniset $Q_DHCP_CONF_FILE DEFAULT admin_password $SERVICE_PASSWORD
 
-    if [[ "$Q_PLUGIN" = "openvswitch" ]]; then
+    if [[ "$Q_PLUGIN" = "openvswitch" || "$Q_PLUGIN" = "nec" ]]; then
         iniset $Q_DHCP_CONF_FILE DEFAULT interface_driver quantum.agent.linux.interface.OVSInterfaceDriver
     elif [[ "$Q_PLUGIN" = "linuxbridge" ]]; then
         iniset $Q_DHCP_CONF_FILE DEFAULT interface_driver quantum.agent.linux.interface.BridgeInterfaceDriver
@@ -1392,7 +1431,7 @@ if is_service_enabled n-cpu; then
     fi
 
     QEMU_CONF=/etc/libvirt/qemu.conf
-    if is_service_enabled quantum && [[ $Q_PLUGIN = "openvswitch" ]] && ! sudo grep -q '^cgroup_device_acl' $QEMU_CONF ; then
+    if is_service_enabled quantum && [[ $Q_PLUGIN = "openvswitch" || $Q_PLUGIN = "nec" ]] && ! sudo grep -q '^cgroup_device_acl' $QEMU_CONF ; then
         # Add /dev/net/tun to cgroup_device_acls, needed for type=ethernet interfaces
         sudo chmod 666 $QEMU_CONF
         sudo cat <<EOF >> /etc/libvirt/qemu.conf
@@ -1840,7 +1879,7 @@ if is_service_enabled quantum; then
         add_nova_opt "quantum_url=http://$Q_HOST:$Q_PORT"
     fi
 
-    if [[ "$Q_PLUGIN" = "openvswitch" ]]; then
+    if [[ "$Q_PLUGIN" = "openvswitch" || $Q_PLUGIN = "nec" ]]; then
         NOVA_VIF_DRIVER="nova.virt.libvirt.vif.LibvirtOpenVswitchDriver"
         LINUXNET_VIF_DRIVER="nova.network.linux_net.LinuxOVSInterfaceDriver"
     elif [[ "$Q_PLUGIN" = "linuxbridge" ]]; then
