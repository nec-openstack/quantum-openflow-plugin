#!/bin/bash -ex

#cli='curl -s -S -H '"Content-type: application/json"
quantum_cli="/usr/local/bin/quantum"
quantum_server=${quantum_server:-127.0.0.1:9696}
vifinfos_path="http://$quantum_server/v1.1/extensions/nec/vifinfos"
sliceable_db="/opt/stack/trema/var/db"



stopstop() {
    echo "# press ENTER to continue ... #"
    read hoge
}

ok_farm() {
    echo "# OK #"
    rm -f ret
}

cli() {
    curl -s -S -H "Content-type: application/json" "$@"
}

#
# For Quantum Standard API
#

create_net() {
    echo "# create network #"
    _tenant=$1
    _net_name=$2

    $quantum_cli create_net $_tenant $_net_name > ret
    grep "^Created a new Virtual Network with ID: " ret
    grep "^for Tenant: $_tenant$" ret
    net_id=$(grep "^Created a new Virtual Network with ID: " ret \
             | sed -e "s/^Created a new Virtual Network with ID: //")
    echo "net_id: $net_id"
    [ ${#net_id} -gt 0 ] || exit 1

    # Check exist
    $quantum_cli list_nets $_tenant > ret
    grep "Network ID: $net_id$" ret

    # Check name
    $quantum_cli show_net $_tenant $net_id > ret
    grep "^Network ID: $net_id$" ret
    grep "^network Name: $_net_name$" ret
}

rename_net() {
    echo "# rename network #"
    _tenant=$1
    _net_id=$2
    _net_name=$3

    $quantum_cli update_net $_tenant $_net_id name=$_net_name > ret
    grep "^Updated Virtual Network with ID: $_net_id$" ret
    grep "^for Tenant: $_tenant$" ret

    # Check Network Name
    $quantum_cli show_net $_tenant $_net_id > ret
    grep "^Network ID: $_net_id$" ret
    grep "^network Name: $_net_name$" ret
}

delete_net() {
    echo "# delete network #"
    _tenant=$1
    _net_id=$2

    $quantum_cli delete_net $_tenant $_net_id > ret
    grep "^Deleted Virtual Network with ID: $_net_id$" ret
    grep "^for Tenant $_tenant$" ret

    $quantum_cli list_nets $_tenant > ret
    grep "Network ID: $_net_id$" ret && exit 1 || echo "ok"
}

create_port() {
    echo "# create port #"
    _tenant=$1
    _net_id=$2

    $quantum_cli create_port $_tenant $_net_id > ret
    grep "^Created new Logical Port with ID: " ret
    grep "^on Virtual Network: $_net_id$" ret
    grep "^for Tenant: $_tenant$" ret
    port_id=$(grep "^Created new Logical Port with ID: " ret \
              | sed -e "s/^Created new Logical Port with ID: //")
    echo "port_id: $port_id"
    [ ${#port_id} -gt 0 ] || exit 1

    # Check exist
    $quantum_cli list_ports $_tenant $_net_id > ret
    grep "Logical Port: $port_id$" ret
}

delete_port() {
    echo "# delete port #"
    _tenant=$1
    _net_id=$2
    _port_id=$3

    $quantum_cli delete_port $_tenant $_net_id $_port_id > ret
    grep "^Deleted Logical Port with ID: $_port_id$" ret
    grep "^on Virtual Network: $_net_id$" ret
    grep "^for Tenant: $_tenant$" ret

    $quantum_cli list_ports $_tenant $_net_id > ret
    grep "Logical Port: $_port_id$" ret && exit 1 || echo "ok"
}

update_port() {
    _tenant=$1
    _net_id=$2
    _port_id=$3
    _state=$4

    $quantum_cli update_port $_tenant $_net_id $_port_id state=$_state > ret
    grep "^Updated Logical Port with ID: $_port_id$" ret
    grep "^on Virtual Network: $_net_id$" ret
    grep "^for tenant: $_tenant$" ret

    # Check state
    $quantum_cli show_port $_tenant $_net_id $_port_id > ret
    grep "^Logical Port ID: $_port_id$" ret
    grep "^administrative state: $_state$" ret
    grep "^on Virtual Network: $_net_id$" ret
    grep "^for Tenant: $_tenant$" ret
}

activate_port() {
    echo "# activate port #"
    update_port $1 $2 $3 'ACTIVE'
}

deactivate_port() {
    echo "# deactivate port #"
    update_port $1 $2 $3 'DOWN'
}

plug_iface() {
    echo "# plug port #"
    _tenant=$1
    _net_id=$2
    _port_id=$3
    _vif_id=$4

    $quantum_cli plug_iface $_tenant $_net_id $_port_id $_vif_id > ret
    grep "^Plugged interface $_vif_id$" ret
    grep "^into Logical Port: $_port_id$" ret
    grep "^on Virtual Network: $_net_id$" ret
    grep "^for Tenant: $_tenant$" ret

    $quantum_cli show_port_detail $_tenant $_net_id $_port_id > ret
    grep "^Logical Port ID: $_port_id$" ret
    grep "^interface: $_vif_id$" ret
    grep "^on Virtual Network: $_net_id$" ret
    grep "^for Tenant: $_tenant$" ret
}

unplug_iface() {
    echo "# unplug port #"
    _tenant=$1
    _net_id=$2
    _port_id=$3

    $quantum_cli unplug_iface $_tenant $_net_id $_port_id > ret
    grep "^Unplugged interface from Logical Port: *$_port_id$" ret
    grep "^on Virtual Network: $_net_id$" ret
    grep "^for Tenant: $_tenant$" ret

    $quantum_cli show_port_detail $_tenant $_net_id $_port_id > ret
    grep "^Logical Port ID: $_port_id$" ret
    grep "^interface: <none>$" ret
    grep "^on Virtual Network: $_net_id$" ret
    grep "^for Tenant: $_tenant$" ret
}

#
# For VIFINFO API
#

create_vifinfo() {
    echo "# create vifinfo #"
    _vif_id=$1
    _dpid=$2
    _port_no=$3
    _mac=${4:-00:11:22:33:44:55}

    _body="{\"vifinfo\": {\"interface_id\": \"$_vif_id\",\
                          \"ofs_port\": {\"datapath_id\": \"$_dpid\",\
                                         \"port_no\": \"$_port_no\",\
                                         \"mac\": \"$_mac\" }}}"

    cli -d "$_body" "$vifinfos_path" > ret
    grep "{\"vifinfo\": {\"interface_id\": \"$_vif_id\"}}" ret

    cli "$vifinfos_path" > ret
    grep "\"interface_id\": \"$_vif_id\"" ret

    cli "$vifinfos_path/$_vif_id" > ret
    grep "\"interface_id\": \"$_vif_id\"" ret
    grep "\"datapath_id\": \"$_dpid\"" ret
    grep "\"port_no\": \"$_port_no\"" ret
}

update_vifinfo() {
    echo "# update vifinfo #"
    _vif_id=$1
    _dpid=$2
    _port_no=$3
    _mac=${4:-00:11:22:33:44:55}

    _body="{\"vifinfo\": {\"interface_id\": \"$_vif_id\",\
                          \"ofs_port\": {\"datapath_id\": \"$_dpid\",\
                                         \"port_no\": \"$_port_no\",\
                                         \"mac\": \"$_mac\" }}}"

    cli -X PUT -d "$_body" "$vifinfos_path/$_vif_id" > ret

    cli "$vifinfos_path/$_vif_id" > ret
    grep "\"interface_id\": \"$_vif_id\"" ret
    grep "\"datapath_id\": \"$_dpid\"" ret
    grep "\"port_no\": \"$_port_no\"" ret
}

delete_vifinfo() {
    echo "# delete vifinfo #"
    _vif_id=$1

    cli -X DELETE "$vifinfos_path/$_vif_id"

    cli "$vifinfos_path" > ret
    grep "\"interface_id\": \"$_vif_id\"" ret && exit 1 || echo "ok"
}

#
# For Filter API
#

create_filter() {
    echo "# create filter #"
    _tenant=$1
    _net_id=$2
    _priority=$3
    _action=$4    
    # $5.. condition

    _path="http://$quantum_server/v1.0/tenants/$_tenant/networks/$_net_id/filters"
    _body="{\"filter\": {$_priority, $_action, \"condition\": {"
    shift 2
    for i in "$@"
    do
        _body="$_body$i, "
    done
    _body="${_body%, }}}}"

    cli -d "$_body" "$_path" > ret
    grep '{"filter": {"id": "[^"]*"}}' ret
    filter_id=$(grep filter ret | sed -e 's/^{"filter": {"id": "//' -e 's/"}}$//')
    echo "filter_id: $filter_id"
    [ ${#filter_id} -gt 0 ] || exit 1

    cli "$_path" > ret
    grep "\"id\": \"$filter_id\"" ret

    cli "$_path/$filter_id" > ret
    for param in "$@"
    do
        grep "$param" ret
    done
}

update_filter() {
    echo "# update filter #"
    _tenant=$1
    _net_id=$2
    _filter_id=$3
    _priority=$4
    _action=$5    
    # $6.. condition

    _path="http://$quantum_server/v1.0/tenants/$_tenant/networks/$_net_id/filters"
    _body="{\"filter\": {$_priority, $_action, \"condition\": {"
    shift 2
    for i in "$@"
    do
        _body="$_body$i, "
    done
    _body="${_body%, }}}}"

    cli -X PUT -d "$_body" "$_fpath" > ret

    cli "$_path" > ret
    grep "\"id\": \"$_filter_id\"" ret

    cli "$_path/$_filter_id" > ret
    for param in "$@"
    do
        grep "$param" ret
    done
}

list_filters() {
    echo "# list filters #"
    _tenant=$1
    _net_id=$2

    _path="http://$quantum_server/v1.0/tenants/$_tenant/networks/$_net_id/filters"

    cli "$_path" | json_xs > ret
    grep "id" ret | sed -e 's/"id" : //' | while read id
    do
        eval i'='$id
        cli "$_path/$i"
    done
}

delete_filter() {
    echo "# delete filter #"
    _tenant=$1
    _net_id=$2
    _filter_id=$3

    _path="http://$quantum_server/v1.0/tenants/$_tenant/networks/$_net_id/filters"
    _fpath="$_path/$_filter_id"

    cli -X DELETE "$_fpath" > ret

    cli "$_path" > ret
    grep "\"id\": \"$_filter_id\"" ret && exit 1 || echo "ok"
}

#
# For Trema - Sliceable DB check
#

check_slice() {
    _slice=$1
    _state=$2

    sudo sqlite3 $sliceable_db/slice.db  "select id from slices" > ret
    if [[ $_state == "created" ]]; then
        grep "^$_slice$" ret
    elif [[ $_state == "deleted" ]]; then
        grep "^$_slice$" ret && exit 1 || echo "ok"
    else
        echo "Error: check_slice() invalid state string."
        exit 1
    fi
}

check_binding() {
    _binding=$1
    _state=$2

    sudo sqlite3 $sliceable_db/slice.db "select id from bindings" > ret
    if [[ $_state == "created" ]]; then
        grep "^$_binding$" ret
    elif [[ $_state == "deleted" ]]; then
        grep "^$_binding$" ret && exit 1 || echo "ok"
    else
        echo "Error: check_binding() invalid state string."
        exit 1
    fi
}

check_filter() {
    _filter=$1
    _state=$2

    sudo sqlite3 $sliceable_db/filter.db "select id from filters" > ret
    if [[ $_state == "created" ]]; then
        grep "^$_filter$" ret
    elif [[ $_state == "deleted" ]]; then
        grep "^$_filter$" ret && exit 1 || echo "ok"
    else
        echo "Error: check_filter() invalid state string."
        exit 1
    fi
}
